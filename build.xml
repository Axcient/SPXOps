<?xml version="1.0" encoding="UTF-8"?>
<project name="SPXOps" default="build">
 <property name="toolsdir" value="bin/" />
 <property environment="env"/>

 <target name="build"
         depends="is.build.pkg,prepare,composer,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,build-deb,publish-deb"
         description=""/>

 <target name="build-parallel"
         depends="prepare,lint,tools-parallel"
         description=""/>

 <target name="tools-parallel" description="Run tools in parallel">
  <parallel threadCount="4">
   <sequential>
    <antcall target="pdepend"/>
    <antcall target="phpmd-ci"/>
   </sequential>
   <antcall target="phpcpd-ci"/>
   <antcall target="phpcs-ci"/>
   <antcall target="phploc-ci"/>
   <sequential>
    <antcall target="build-deb"/>
    <antcall target="publish-deb"/>
   </sequential>
  </parallel>
 </target>

 <target name="is.build.pkg">
     <condition property="build.pkg" value="true" else="false">
        <and>
            <equals arg1="${env.GIT_BRANCH}" arg2="master"/>
            <equals arg1="${env.GIT_PR}" arg2=""/>
        </and>
     </condition>
 </target>

 <target name="clean"
         unless="clean.done"
         description="Cleanup build artifacts">
  <delete dir="${basedir}/build/api"/>
  <delete dir="${basedir}/build/coverage"/>
  <delete dir="${basedir}/build/logs"/>
  <delete dir="${basedir}/build/pdepend"/>
  <exec dir="${basedir}" executable="/usr/bin/make">
      <arg value="-f"/>
      <arg value="Makefile"/>
      <arg value="clean"/>
  </exec>
 
  <property name="clean.done" value="true"/>
 </target>

 <target name="prepare"
         unless="prepare.done"
         depends="clean"
         description="Prepare for build">
  <echo>BRANCH=${env.GIT_BRANCH}</echo>
  <echo>PR=${env.GIT_PR}</echo>
  <mkdir dir="${basedir}/build/api"/>
  <mkdir dir="${basedir}/build/coverage"/>
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/pdepend"/>
  <property name="prepare.done" value="true"/>
 </target>

 <target name="composer" depends="prepare" description="Installing composer dependencies">
  <exec executable="composer" failonerror="true">
   <arg value="install" />
   <arg value="--dev" />
   <arg value="--prefer-dist" />
   <arg value="--no-progress" />
  </exec>
 </target>

 <target name="lint" description="Perform syntax check of sourcecode files">
  <apply executable="php" failonerror="true">
   <arg value="-l" />
   <fileset dir="${basedir}/app">
       <include name="**/*.php" />
       <include name="bin/*" />
       <include name="sbin/*" />
    <modified />
   </fileset>
  </apply>
 </target>

 <target name="phploc" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
  <exec executable="${toolsdir}phploc">
   <arg value="--count-tests" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phploc-ci" depends="composer" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${toolsdir}phploc">
   <arg value="--count-tests" />
   <arg value="--log-csv" />
   <arg path="${basedir}/build/logs/phploc.csv" />
   <arg value="--log-xml" />
   <arg path="${basedir}/build/logs/phploc.xml" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="pdepend" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${toolsdir}pdepend">
   <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phpmd"
         description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${toolsdir}phpmd">
   <arg path="${basedir}/app" />
   <arg value="text" />
   <arg path="${basedir}/build/phpmd.xml" />
  </exec>
 </target>

 <target name="phpmd-ci"
         depends="prepare"
         description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${toolsdir}phpmd">
   <arg path="${basedir}/app" />
   <arg value="xml" />
   <arg path="${basedir}/build/phpmd.xml" />
   <arg value="--reportfile" />
   <arg path="${basedir}/build/logs/pmd.xml" />
  </exec>
 </target>

 <target name="phpcs"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${toolsdir}phpcs">
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phpcs-ci"
         depends="prepare"
         description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${toolsdir}phpcs" output="/dev/null">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phpcpd"
         description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${toolsdir}phpcpd">
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phpcpd-ci"
         depends="prepare"
         description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${toolsdir}phpcpd">
   <arg value="--log-pmd" />
   <arg path="${basedir}/build/logs/pmd-cpd.xml" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="build-deb" 
     depends="prepare,is.build.pkg"
     if="build.pkg"
     description="Build package">
     <exec dir="${basedir}" executable="/usr/bin/make">
         <arg value="-f"/>
         <arg value="Makefile"/>
         <arg value="build"/>
     </exec>
 </target>

 <target name="publish-deb" 
     if="build.pkg"
     depends="build-deb,is.build.pkg"
     description="Publish Package">
     <exec dir="${basedir}" executable="/usr/bin/make">
         <arg value="-f"/>
         <arg value="Makefile"/>
         <arg value="publish"/>
     </exec>
 </target>

</project>
