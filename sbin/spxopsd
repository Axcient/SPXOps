#!/usr/bin/php
<?php
 require_once(dirname(__FILE__)."/../libs/config.inc.php");
 require_once(dirname(__FILE__)."/../libs/autoload.lib.php");
 require_once(dirname(__FILE__)."/../libs/daemon.obj.php");

 class SPXOpsd implements Daemonizable {

  private $_lrun = 0;
  private $_crun = 0;
  private $_jexec = 0;
  private $_interval = 1;
  private $_logfd = 0;
  private $_foreground = false;

  public $pid = -1;

  public function setForeground($f = false) {
    $this->_foreground = $f;
  }

  public function log($str, $lvl = LLOG_INFO) {
    $obj = null;
    Logger::log($str, $obj, $lvl);
  }

  /* Main run () */
  public function run() {

    try {
      $m = mysqlCM::getInstance();
      if ($m->connect()) {
        $this->log(" Error with SQL db: ".$m->getError());
        sleep($this->_interval);
        return -1;
      }
    } catch (Exception $e) {
      sleep($this->_interval);
      throw($e);
    }

    $this->log("Entering run()", LLOG_DEBUG);

    /* update last run time */
    $this->_lrun = $this->_crun;
    $this->_crun = time();

    $this->log("Previous run: ".$this->_lrun, LLOG_DEBUG);
    $this->log("New run: ".$this->_crun, LLOG_DEBUG);
    
    try {
      $j = Job::fetchFirst($this);
      if ($j) {
        $this->log("Trying to execute job :$j", LLOG_DEBUG);
        $j->runJob();
      }
    } catch (Exception $e) {
      sleep($this->_interval);
      throw($e);
    }
    /* See if it's time to add some recurrent jobs */
    if (!Lock::isFctLocked('rjob')) {
      $this->log("Locking RJob function", LLOG_DEBUG);
      Lock::lockFct('rjob');
      $rjobs = RJob::getAll();
      foreach($rjobs as $rjob) {
	if (($rjob->t_last + $rjob->frequency) <= $this->_crun) { // RUN IT FFS!
          $this->log("Added $rjob to the job queue ", LLOG_INFO);
	  $rjob->addIt();
          $rjob->t_last = $this->_crun;
          $rjob->update();
        }
      }
      $this->log("Unlocking RJob function", LLOG_DEBUG);
      Lock::unlockFct('rjob');
    } else {
      $this->log("RJob function locked..", LLOG_WARN);
    }

    
    /* Check for Stalled jobs */
    try {
      $f = array();
      $f['state'] = 'CST:'.S_RUN;
      $f['pid'] = $this->pid;
      $fjobs = Job::getAll(true, $f);
      foreach($fjobs as $fjob) {
        $fjob->state = S_FAIL;
	$fjob->update();
	$this->log("Job $fjob has been set to FAILED as we were responsible for it...", LLOG_WARN);
      }
    } catch (Exception $e) {
      sleep($this->_interval);
      throw($e);
    }

    $m->disconnect();
    $this->log("sleeping..", LLOG_DEBUG);
    sleep($this->_interval);
    return 0;
  }

  public function start() {
    if (!$this->_foreground) Logger::openLog();

    $m = mysqlCM::getInstance();
    if ($m->connect()) {
      die($argv[0]." Error with SQL db: ".$m->getError()."\n");
    }
  }

  public function cleanup() {
    if (!$this->_foreground) Logger::closeLog();
  }

  /* Signal management */

  public function sigterm() {
    $this->cleanup();
    die();
  }

  public function sighup() {
    if (!$this->_foreground) Logger::openLog();
    if (!$this->_foreground) Logger::closeLog();
  }
 
  public function sigkill() {
    $this->cleanup();
    die();
  }

  public function sigusr1() {
  }

  public function sigusr2() {
  }

  public function help() {
    global $argv;
    echo "$argv[0] [-hvf]\n";
  }

  /* Log management */
  public function __construct() {
    $j = new Job();
    unset($j);
  }

 }

 // Connect to mysql
 $m = mysqlCM::getInstance();
 if ($m->connect()) {
   die($argv[0]." Error with SQL db: ".$m->getError()."\n");
 }

 $spxopsd = new SPXOpsd();

 $opts = "vhf";
 $options = getopt($opts);

 if (isset($options["h"])) {
  $spxopsd->help();
  exit(0);
 }

 if (isset($options["v"])) {
   Logger::logLevel(LLOG_DEBUG);
 }

 if (isset($options["f"])) {
  $o['f'] = true;
 } else {
  $o['f'] = false;
 }

 $spxopsd->setForeground($o['f']);

 $daemon = new Daemon($spxopsd, $o['f']);  

?>
