#!/usr/bin/php
<?php
  /**
   * SPXOps Daemon
   *
   * @author Gouverneur Thomas <tgo@espix.net>
   * @copyright Copyright (c) 2012-2015, Gouverneur Thomas
   * @version 1.0
   * @package CLI
   * @category utils
   * @subpackage list
   * @filesource
   * @license https://raw.githubusercontent.com/tgouverneur/SPXOps/master/LICENSE.md Revised BSD License
   */
 
 require_once dirname(__FILE__)."/../libs/utils.obj.php";


 class SPXOpsd implements Daemonizable
 {

     private $_lrun = 0;
     private $_crun = 0;
     private $_jexec = 0;
     private $_interval = 1;
     private $_logfd = 0;
     private $_foreground = false;
     private $_nrProcess = 1;

     private $_networkPid = 0;
     private $_network = null;

     public $pid = -1;
     public $ppid = -1;
     public $curProcess = 1;
     public $f_master = 0;
     public $f_network = 0;

     public $nr = 0;

     public function setForeground($f = false)
     {
         $this->_foreground = $f;
     }

     public function log($str, $lvl = LLOG_INFO)
     {
         $obj = null;
         Logger::log($str, $obj, $lvl);
     }

  /* Main run () */
  public function run()
  {
      try {
          $m = MySqlCM::getInstance();
          if ($m->isLink()) {
              $m->disconnect();
          }
          if ($m->connect()) {
              $this->log(" Error with SQL db: ".$m->getError());
              sleep($this->_interval);
              return -1;
          }
      } catch (Exception $e) {
          sleep($this->_interval);
          throw($e);
          return -1;
      }

      $this->log('Entering run() ['.$this->f_master.']('.$this->pid.':'.$this->ppid.')', LLOG_DEBUG);

      /* update last run time */
      $this->_lrun = $this->_crun;
      $this->_crun = time();
      $this->log("Previous run: ".$this->_lrun, LLOG_DEBUG);
      $this->log("New run: ".$this->_crun, LLOG_DEBUG);

      /* Ping pid() */
      try {
        $this->log('>'.$this->nr++.' Pid::ping($this)', LLOG_DEBUG);
        Pid::ping($this);
        $this->log('<Pid::ping($this)', LLOG_DEBUG);
      } catch (Exception $e) {
        $this->log('Pid::ping() error: '.$e->getMesssage(), LLOG_DEBUG);
        $this->log('BT: '.$e->getTraceAsString().':', LLOG_DEBUG);
        sleep($this->_interval);
        return -1;
      }

      /* refresh main settings */
      try {
        Setting::fetchAll();
        $interval = Setting::get('daemon', 'sleepTime');
        $nrProcess = Setting::get('daemon', 'nrProcess');
        if ($interval) {
            $this->setInterval($interval->value);
        }
        if ($nrProcess) {
            $this->setNrProcess($nrProcess->value);
        }
      } catch (Exception $e) {
        $this->log('Cannot fetch Settings::fetchAll():'.$e->getMessage(), LLOG_DEBUG);
        $this->log('BT: '.$e->getTraceAsString().':', LLOG_DEBUG);
      }

      /* Check for other eventually died pids or locks */
      if ($this->f_master) {
        /* check if network thread has died */
        if ($this->f_network && $this->_networkPid) {
          $this->_networkPid->checkMe($this);
          if ($this->_networkPid->f_dead) {
              Logger::log("Network Pid ".$this->_networkPid." has died", $this, LLOG_DEBUG);
              $this->_networkPid = 0;
              $this->network = null;
          }
        }
        /* check if we haven't yet started a network pid, if needed */
        if ($this->f_network && !$this->_networkPid) {
          $this->_networkPid = $this->spawnNetwork();
          $this->log("Spawned network process: ".$this->_networkPid, LLOG_DEBUG);
        }
        /* first, reap eventual dead childs */
        $this->sigchld();
        Pid::check($this);
        Pid::checkLocks($this);
        if (!$this->_foreground) {
            while ($this->curProcess < $this->_nrProcess) {
                $pid = $this->spawnProcess();
                $this->log("Spawned other process: $pid", LLOG_DEBUG);
                $this->curProcess++;
            }
        }
        /** Check that running jobs have an associated valid pid,
         * otherwise, they should be flagged as stalled jobs
         */
        $jobs = Job::getAll(true, array('state' => S_RUN));
          foreach ($jobs as $job) {
            if ($job->fk_pid > 0) {
                $pid = new Pid($job->fk_pid);
                if ($pid->fetchFromId()) {
                    Logger::log("Set as STALLED stalled job $job because pid doesn't exist ", $pid, LLOG_DEBUG);
                    $job->state = S_STALL;
                    $job->fk_pid = -1;
                    $job->update();
                }
            }
        }

        /**
         * Check if there are mails to be sent, if so,
         * go ahead and send them...
         */
        $a_mail = SPXMail::getAll(true, array(), array('ASC:t_add'));
        foreach($a_mail as $mail) {
            $mail->send();
            $this->log('Sent email to '.$mail->to, LLOG_DEBUG);
            $mail->delete();
        }

        /**
         * Check if there are some PIDs to Kill...
         */
        $a_pkill = Pid::getAll(true, array('f_kill' => 1));
        foreach($a_pkill as $pid) {
            Logger::log("Pid $pid is going to be killed.", $pid, LLOG_INFO);
            $pid->kill();
        }
      }

      if (!$this->f_master ||
            $this->_foreground) { /* Only child are doing the reluctant work ... */
      try {
          $j = Job::fetchFirst($this);
          if ($j) {
              $this->log("Trying to execute job :$j", LLOG_DEBUG);
              $j->runJob();
              $j->notify();
          }
      } catch (Exception $e) {
          sleep($this->_interval);
          $this->log("Caught exception: :$e", LLOG_ERR);
          throw($e);
      }


      /* See if it's time to add some recurrent jobs */
      if (Lock::lockFctIfNot('rjob')) {
          $this->log("Locked RJob function for our usage", LLOG_DEBUG);
          $rjobs = RJob::getAll();
          foreach ($rjobs as $rjob) {
              if (($rjob->t_last + $rjob->frequency) <= $this->_crun) { // RUN IT FFS!
                  $this->log("Added $rjob to the job queue ", LLOG_INFO);
                  $rjob->addIt();
                  $rjob->t_last = $this->_crun;
                  $rjob->update();
              }
          }
          $this->log("Unlocking RJob function", LLOG_DEBUG);
          Lock::unlockFct('rjob');
      } else {
          $this->log("RJob function locked or cannot acquire lock..", LLOG_WARN);
      }

      /* Check for Stalled jobs */
      try {
          $f = array();
          $f['state'] = 'CST:'.S_RUN;
          $f['pid'] = $this->pid;
          $fjobs = Job::getAll(true, $f);
          foreach ($fjobs as $fjob) {
              $fjob->state = S_FAIL;
              $fjob->update();
              $this->log("Job $fjob has been set to FAILED as we were responsible for it...", LLOG_WARN);
          }
      } catch (Exception $e) {
          sleep($this->_interval);
          throw($e);
      }
    }
      $m->disconnect();
      $this->log("sleeping..", LLOG_DEBUG);
      sleep($this->_interval);
//    pcntl_signal_dispatch();
    return 0;
  }

     public function setNrProcess($i)
     {
         $this->_nrProcess = $i;
     }

     public function setInterval($i)
     {
         $this->_interval = $i;
     }

     public function start()
     {
         if (!$this->f_master && $this->ppid) {
             Config::$spxopsd_log = Config::$spxopsd_log.'-'.$this->pid;
         }
         if (!$this->_foreground) {
             Logger::openLog();
         }

         $m = MySqlCM::getInstance();
         if ($m->isLink()) {
             $m->disconnect();
         }
    //$m->disconnect();
    //if ($m->connect()) {
    //  die($argv[0]." Error with SQL db: ".$m->getError()."\n");
    // }
     }

     public function cleanup()
     {
         if (!$this->_foreground) {
             Logger::closeLog();
         }
     }

  /* Signal management */

  public function sigchld()
  {
      while (true) {
          $p = pcntl_waitpid(-1, $status, WNOHANG);
          if ($p > 0) {
              $this->log("We just reaped a child: $p", LLOG_WARN);
          } else {
              return;
          }
      }
  }

     public function sigterm()
     {
         $this->cleanup();
         die();
     }

     public function sighup()
     {
         if (!$this->_foreground) {
             Logger::openLog();
         }
         if (!$this->_foreground) {
             Logger::closeLog();
         }
     }

     public function sigkill()
     {
         $this->cleanup();
         die();
     }

     public function sigusr1()
     {
     }

     public function sigusr2()
     {
     }

     public function help()
     {
         global $argv;
         echo "$argv[0] [-hvf]\n";
     }

  /* Log management */
  public function __construct($parent = null)
  {
      if ($parent) {
          $this->f_master = 0;
          $this->ppid = $parent->pid;
          $this->setForeground(false);
          $this->_interval = $parent->getInterval();
      } else {
          $j = new Job();
          unset($j);
      }
  }

     private function spawnNetwork()
     {
         $this->network = new SPXNet(Config::$server_ipaddr, Config::$server_port, $this, 1);
         $daemon = new Daemon($this->network, false);
         $m = MysqlCM::getInstance();
         if ($m->connect()) {
             throw new SPXException('SPXOps::spawnNetwork(): Cannot connect to SQL database');
         }
         $pid = new Pid();
         $pid->agent = Config::$agentname;
         $pid->pid = $daemon->getPid();
         $pid->ppid = $this->pid;
         $pid->f_master = 0;

         return $pid;
     }

     private function spawnProcess()
     {
         $newD = new SPXOpsd($this);
         $daemon = new Daemon($newD, false);
         $m = MysqlCM::getInstance();
         if ($m->connect()) {
             throw new SPXException('SPXOps::spawnProcess(): Cannot connect to SQL database');
         }
         $pid = new Pid();
         $pid->agent = Config::$agentname;
         $pid->pid = $daemon->getPid();
         $pid->ppid = $this->pid;
         $pid->f_master = 0;

         return $pid;
     }
     public function getInterval()
     {
         return $this->_interval;
     }
 }

 // Connect to mysql
 $m = MySqlCM::getInstance();
 if ($m->connect()) {
     die($argv[0]." Error with SQL db: ".$m->getError()."\n");
 }

 $spxopsd = new SPXOpsd();

 $opts = "vhf";
 $options = getopt($opts);

 if (isset($options["h"])) {
     $spxopsd->help();
     exit(0);
 }

 if (isset($options["v"])) {
     Logger::logLevel(LLOG_DEBUG);
 }

 if (isset($options["f"])) {
     $o['f'] = true;
 } else {
     $o['f'] = false;
 }

 $spxopsd->setForeground($o['f']);
 Setting::fetchAll();
 $interval = Setting::get('daemon', 'sleepTime');
 $nrProcess = Setting::get('daemon', 'nrProcess');
 $spxopsd->setInterval($interval->value);
 $spxopsd->setNrProcess($nrProcess->value);
 $spxopsd->f_master = 1;
 if (Config::$server_enabled) {
     $spxopsd->f_network = 1;
 }

 $m->disconnect();

 $daemon = new Daemon($spxopsd, $o['f']);

?>
